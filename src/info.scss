@use 'variables' as var;

@use 'base';
@use 'header';
@use 'footer';

main {
    padding-inline: var.$defaultGap;
    min-height: calc(100vh - header.$height - footer.$height);
    min-height: calc(100svh - header.$height - footer.$height);
    display: flex;
    flex-direction: column;
    gap: var.$defaultGap;

    .contactsContainer {
        padding-bottom: var.$defaultGap;
    }

    .imageWrapper {
        position: relative;

        .trueImage {
            position: absolute;

            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
        }

        .placeholder {
            max-width: 100%;
            z-index: 1;
            position: relative;
        }
    }
}

a {
    color: var.$defaultTextColor;
    font-weight: 500;
    text-decoration: none;
}

@media (min-width: var.$desktopInfoBreakpoint) {
    header {
        background: linear-gradient(180deg, var.$defaultBackgroundColor 90%, rgba(0,0,0,0) 100%);
    }

    main {
        flex-direction: row-reverse;

        padding-top: header.$height;
        margin-top: calc(-1 * header.$height);

        .textAndContactsContainer {
            display: flex;
            flex-direction: column-reverse;
            justify-content: space-between;
            gap: var.$defaultGap;

            min-height: calc(100vh - header.$height);
            min-height: calc(100svh - header.$height);
        }
        
        .imageWrapper {
            margin-top: calc(-1 * header.$height + var.$defaultGap);
            z-index: calc(header.$zindex + 1);

            max-width: 50%;

            width: fit-content;
            height: fit-content;

            position: sticky;
            top: var.$defaultGap;

            .placeholder {
                max-width: calc(min(50vw, var.$maxPageWidth / 2) - 3 * var.$defaultGap);
                max-height: calc(100vh - 2 * var.$defaultGap);
                max-height: calc(100svh - 2 * var.$defaultGap);
            }
        }
    }
}